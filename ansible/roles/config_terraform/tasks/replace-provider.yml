---
- name: replace-provider task must only be called in migration context!
  assert:
    that:
      - stackhead_migration_context|d(0) == 1
- block:
    - set_fact:
        loaded_terraform_providers: []
    - include_tasks: "../roles/stackhead_module_api/tasks_internal/terraform.yml"

    # add old provider back to list and regenerate providers
    - set_fact:
        initial_loaded_terraform_providers: "{{ loaded_terraform_providers }}"
        loaded_terraform_providers: "{{ loaded_terraform_providers + [{'vendor': provider_old.split('/').0, 'name': provider_old.split('/').1, 'version': provider_old_version, 'nameSuffix': 'oldprovider'}] }}"
    - include_tasks: "../roles/config_terraform/tasks/generate-providers.yml"

    # Replace provider in all projects
    - find:
        paths: "{{ stackhead__projects_root_folder }}"
        recurse: no
        file_type: directory
      register: projectfolders
    - include_tasks: "../roles/config_terraform/tasks/replace-provider-in-project.yml"
      vars:
        terraform_folder: "{{ this_project_folder.path }}/terraform/"
      loop_control:
        loop_var: this_project_folder
      with_items: "{{ projectfolders.files }}"

    # Replace in system folder
    - include_tasks: "../roles/config_terraform/tasks/replace-provider-in-project.yml"
      vars:
        terraform_folder: "{{ stackhead__system_tf_root_folder }}"

    # Regenerate used providers
    - include_tasks: "../roles/config_terraform/tasks/regenerate-dependencies.yml"
